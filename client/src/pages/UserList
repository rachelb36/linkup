import React, { useState } from 'react';
import { useQuery, useMutation } from '@apollo/client';
import {
  IconButton,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Box,
  Button,
  TextField,
} from '@mui/material';
import { Edit, Delete } from '@mui/icons-material';
import { GET_ALL_EVENTS } from '../utils/queries';
import { DELETE_EVENT, UPDATE_EVENT } from '../utils/mutations';
import { useNavigate } from 'react-router-dom';

const UserList = () => {
  const { loading, data, refetch } = useQuery(GET_ALL_EVENTS);
  const events = data?.events || [];

  const [formData, setFormData] = useState({});
  const [editingId, setEditingId] = useState(null);

  const [updateEvent] = useMutation(UPDATE_EVENT);
  const [deleteEvent] = useMutation(DELETE_EVENT);
  const navigate = useNavigate();

  const onUpdateEvent = (event) => {
    setEditingId(event._id);
    setFormData({
      firstName: event.name,
      lastName: event.description,
      email: user.email,
      occupation: user.occupation,
    });
  };

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleFormSubmit = async (event) => {
    event.preventDefault();
    try {
      await updateUser({
        variables: { id: editingId, ...formData },
      });
      setEditingId(null); // Exit editing mode
      setFormData({}); // Clear form data
      refetch(); // Refresh list after update
      navigate(`/employee/${editingId}`);
    } catch (err) {
      console.error('Error updating employee:', err);
    }
  };

  const onDeleteEmployee = async (id) => {
    try {
      await deleteEmployee({ variables: { id } });
      refetch(); // Refresh the list after deletion
      alert('Employee deleted successfully!');
    } catch (error) {
      console.error('Error deleting employee:', error);
      alert('Failed to delete employee.');
    }
  };

  if (loading) return <p>Loading...</p>;

  return (
    <Box width={600} margin='auto' bgcolor='white' padding={2}>
      <h2>Employee List</h2>
      <TableContainer>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>Last Name</TableCell>
              <TableCell>First Name</TableCell>
              <TableCell>Position</TableCell>
              <TableCell>Update</TableCell>
              <TableCell>Delete</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {employees.map((employee) => (
              <TableRow key={employee._id}>
                <TableCell>{employee.lastName}</TableCell>
                <TableCell>{employee.firstName}</TableCell>
                <TableCell>{employee.position}</TableCell>
                <TableCell>
                  <IconButton onClick={() => onUpdateEmployee(employee)}>
                    <Edit />
                  </IconButton>
                </TableCell>
                <TableCell>
                  <IconButton onClick={() => onDeleteEmployee(employee._id)}>
                    <Delete />
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
      {editingId && (
        <Box marginTop={2}>
          <form onSubmit={handleFormSubmit}>
            <TextField
              name='firstName'
              label='First Name'
              value={formData.firstName || ''}
              onChange={handleInputChange}
              fullWidth
              margin='normal'
            />
            <TextField
              name='lastName'
              label='Last Name'
              value={formData.lastName || ''}
              onChange={handleInputChange}
              fullWidth
              margin='normal'
            />
            <TextField
              name='email'
              label='Email'
              value={formData.email || ''}
              onChange={handleInputChange}
              fullWidth
              margin='normal'
            />
            <TextField
              name='address'
              label='Address'
              value={formData.address || ''}
              onChange={handleInputChange}
              fullWidth
              margin='normal'
            />
            <Button
              type='submit'
              variant='contained'
              color='primary'
            >
              Save Changes
            </Button>
          </form>
        </Box>
      )}
    </Box>
  );
};

export default EmployeeList;
